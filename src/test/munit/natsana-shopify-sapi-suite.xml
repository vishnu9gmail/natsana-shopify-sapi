<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="natsana-shopify-sapi-suite.xml" />
	<munit:test name="get:\products:natsana-shopify-sapi-config-test" doc:id="72346736-b7e6-47c4-a1e6-77bb7eaed7e2" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference to invoke-get-products-shopify-api-common-sub-flow" doc:id="ea0ed0a2-d515-4fa0-be94-790686a9ebbe" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="05b28087-600e-47f0-941e-848e75b401cb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getproductsnatsanashopifysapiconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getproductsnatsanashopifysapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://getproductsnatsanashopifysapiconfigtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://getproductsnatsanashopifysapiconfigtest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="bd532ffc-324b-4957-8789-b498d4419a8d" >
				<munit:payload value="#[readUrl('classpath://getproductsnatsanashopifysapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getproductsnatsanashopifysapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getproductsnatsanashopifysapiconfigtest\set-event_variable_.dwl')]" />
					<munit:variable key="info" value="#[output application/json --- readUrl('classpath://getproductsnatsanashopifysapiconfigtest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\products:natsana-shopify-sapi-config" doc:id="68355863-f1d1-45dd-98a3-12c95a3c9818" name="get:\product:natsana-shopify-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ecbc5062-e32a-4395-a09f-7329fc3564f5" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getproductsnatsanashopifysapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\checkouts:natsana-shopify-sapi-config-test" doc:id="d25956e3-e5ca-40d1-b19c-e4210d60239f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference to invoke-get-products-shopify-api-common-sub-flow" doc:id="2146c2cd-a6b6-4ae5-ae96-0ca178bd1743" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="cb24f660-3fff-4cae-b824-769d377227f9" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\mock_variable_1.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="5209d8f2-2e70-4ad5-bc41-475c681d2c60" >
				<munit:payload value="#[readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\set-event_variable_.dwl')]" />
					<munit:variable key="info" value="#[output application/json --- readUrl('classpath://getcheckoutsnatsanashopifysapiconfigtest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\checkouts:natsana-shopify-sapi-config" doc:id="83851652-937f-4930-af6a-2960ddc5da70" name="get:\checkout:natsana-shopify-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a6d15131-c862-402f-b69f-386cf548dee6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getcheckoutsnatsanashopifysapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\healthCheck:natsana-shopify-sapi-config-test" doc:id="72cde835-3227-4500-a57d-cae5372d901f" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="95b33671-569c-46b3-931f-81660a770be6" >
				<munit:payload value="#[readUrl('classpath://gethealthChecknatsanashopifysapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://gethealthChecknatsanashopifysapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://gethealthChecknatsanashopifysapiconfigtest\set-event_variable_.dwl')]" />
					<munit:variable key="info" value="#[output application/json --- readUrl('classpath://gethealthChecknatsanashopifysapiconfigtest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\healthCheck:natsana-shopify-sapi-config" doc:id="96d184c2-6f56-40df-bf49-4a9c7f74e910" name="get:\healthCheck:natsana-shopify-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a4083967-86d6-4f21-bc85-8e0f718c91ff" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import gethealthChecknatsanashopifysapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: ((payload - 'timestamp') ++ {"timestamp": "2024-05-05T16:33:32.481+05:30"}), attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="natsana-shopify-sapi-main-test" doc:id="0262ad5d-ba17-4c7a-b6c7-84ff6869c93b" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="3eba4ce2-360b-46d7-af0b-26f6c5caefb3" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://natsanashopifysapimaintest1\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="edc99e29-6ce5-465a-b81d-b6a8be791ccd" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="c062b79e-cfbf-49c8-9da2-25acd1ba52eb" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f20772a2-0151-4076-a7cb-039a343c9b52" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="natsana-shopify-sapi-main-test-badrequest" doc:id="bb84cf16-90f1-4411-abaf-efb84a7818b6" expectedErrorType="APIKIT:BAD_REQUEST">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="6f6f95a7-a90a-4ac7-ad47-c9203b737726" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="5cf6480e-6d12-44b2-b877-6c3dfd853a7a" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="a9721926-fd00-46f4-a35a-cdb050985d20" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b6d3f11f-a5ba-4e54-8d4e-4790fcb4a613" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="natsana-shopify-sapi-main-test-not-found" doc:id="a06ad55c-6fa7-4082-88f4-64981b9f7d04" expectedErrorType="APIKIT:NOT_FOUND">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="adee262b-cd85-42e5-a88b-4e6dd78409bd" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			

</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="4acf9937-6f3d-44f8-aeaa-c74b227ef0f5" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="a21d7ce4-6ff0-444a-9d2a-3eefa9223b36" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="18f77bd9-396b-464c-88fa-047e25b4b49c" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="natsana-shopify-sapi-main-test-method-not-allowed" doc:id="a41d854a-1277-41ce-8412-e80b4b506c67" expectedErrorType="APIKIT:METHOD_NOT_ALLOWED">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="1bccabba-5e97-46b6-9cd9-d5e6a39d44a5" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:METHOD_NOT_ALLOWED" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="d8cab97b-b727-4751-90e8-549b488797aa" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="b8a2d43b-14fa-404f-ae12-bc56f84081a6" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="838c1a6e-cafa-4a26-9d00-2f895932cf81" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="natsana-shopify-sapi-main-test-not-acceptable" doc:id="b8024a3f-0d66-4110-9551-73d4dee8182d" expectedErrorType="APIKIT:NOT_ACCEPTABLE">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="81ba134a-8595-42bc-986d-a0409e8dd670" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_ACCEPTABLE" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="c876aa52-460c-4ec2-bf64-3e385bf3274a" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="d6ce0959-742b-4010-8ca4-26e92768667c" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="52034e11-271c-4f64-9b63-c69581cab83a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="natsana-shopify-sapi-main-test-unsupported-media-type" doc:id="027f5e18-9ac7-491d-856f-2d49e57dd509" expectedErrorType="APIKIT:UNSUPPORTED_MEDIA_TYPE">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="46aff708-bed9-4630-ac03-100259638b9f" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="5033b6f3-5a62-4c5c-95c2-c8b50622b6ad" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="5214df50-f451-4e86-b588-d6b1dc49873d" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="8e8910ab-5827-4ff6-8020-54ec408fa6ea" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="natsana-shopify-sapi-main-test-not-implemented" doc:id="7c10ba6c-049f-4d4a-b259-fec2d67995b3" expectedErrorType="APIKIT:NOT_IMPLEMENTED">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="8f3c0d5a-5fd0-4959-a436-0356f233ea53" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_IMPLEMENTED" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="af2ccf0c-62a0-4c55-91d4-db9a28150554" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="fc5ff8a1-f201-4347-807c-3cc9f1fe2341" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="59c52a63-15be-4f9d-9c9b-cf531df7bdd2" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test><munit:test name="natsana-shopify-sapi-main-test-connectivity" doc:id="decd044a-871f-4069-8eea-975f68b03bb7" expectedErrorType="HTTP:CONNECTIVITY">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="2cd81bb8-cef0-4f5a-be75-aa03fb5f198e" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="785a9721-9087-4808-9874-3d8540efe8fe" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="a8fe6cf7-15df-487e-ac46-5f3f218a390d" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="93538c75-204c-4981-831f-e4e1336e98b9" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test><munit:test name="natsana-shopify-sapi-main-test-forbidden" doc:id="0ba57239-ca14-4f26-9980-c5b7ea64b1a3" expectedErrorType="HTTP:FORBIDDEN">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="36f8bec1-ff40-4be1-8a6d-324c3942d8df" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:FORBIDDEN" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="134f82ae-bdbc-42e5-8bc6-f92eac7bd40a" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="7c73240d-24e2-4daf-bdd1-b55631f4e995" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="021cfed7-1eeb-4190-aea6-0e9279b0b858" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test><munit:test name="natsana-shopify-sapi-main-test-service-unavailable" doc:id="6728da50-3ecd-4cdf-8030-49fb210ce924" expectedErrorType="HTTP:SERVICE_UNAVAILABLE">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="2d0e1d5a-144c-4496-8a0c-ef636496d691" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:SERVICE_UNAVAILABLE" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="96f07c77-0e14-41fa-9b2b-2363c8ebc006" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="42ff0044-26f3-4567-a70a-7ae5791766d5" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="eb9f4733-6412-4a6a-aecd-c5fd124e1391" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test><munit:test name="natsana-shopify-sapi-main-test-timeout" doc:id="05ae4992-95f4-438b-86f1-fb347300ef6e" expectedErrorType="HTTP:TIMEOUT">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="0a8e5202-1732-43e1-a519-a01a5a09137e" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7e22d266-11d9-4ef0-a3d7-813d1182fd87" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:TIMEOUT" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_1.dwl')]" />
						<munit-tools:variable key="targetApiParams" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_2.dwl')]" />
						<munit-tools:variable key="errorvar" value="#[readUrl('classpath://natsanashopifysapimaintest1\mock_variable_3.dwl')]" />
						<munit-tools:variable key="info" value="#[output application/json --- readUrl('classpath://natsanashopifysapimaintest1\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			


</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="91cfa2ee-f6b3-44bc-8af5-18ae6900c8be" >
				<munit:payload value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://natsanashopifysapimaintest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to natsana-shopify-sapi-main" doc:id="6e8dda84-3d59-4eb9-8688-a4a96c60e6f3" name="natsana-shopify-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="0835472a-32ec-4b08-98d7-fa64fa3f3983" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import natsanashopifysapimaintest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	

</mule>
